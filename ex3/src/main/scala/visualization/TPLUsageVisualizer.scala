package visualization

import analysis.TPLAnalysisResult
import org.knowm.xchart.{CategoryChart, CategoryChartBuilder, SwingWrapper}

import scala.jdk.CollectionConverters._

/**
 * Utility object for visualizing the API coverage results of third-party libraries (TPL)
 * after static analysis. Reads the analysis output (JSON), prints a summary to the console,
 * and displays a bar chart of method coverage for each library.
 */
object TPLUsageVisualizer {
  /**
   * Displays a chart of TPL coverage using the analysis result JSON file.
   *
   * @param results The results generated by this analysis
   */
  def showChart(results: TPLAnalysisResult): Unit = {

    // Extract library names, usage percentages, and method counts
    val libraries = results.analysis.map {tplInfo =>
      val jarName = tplInfo.library.substring(tplInfo.library.lastIndexOf("/") + 1)
      if (jarName.length <= 30) jarName
      else jarName.substring(0, 30) + "..."
    }
    val usagePercents: java.util.List[java.lang.Double] =
      results.analysis.map{tplInfo => java.lang.Double.valueOf(tplInfo.usageRatio * 100)}.asJava

    // Create a bar chart to visualize the coverage for each library
    val chart: CategoryChart = new CategoryChartBuilder()
      .width(1350)
      .height(750)
      .title(s"TPL API Coverage (${results.callGraphAlgorithm}, in ${results.programTimeSeconds} Sekunden)")
      .xAxisTitle("Library")
      .yAxisTitle("Coverage (%)")
      .build()

    // Add the coverage series to the chart
    chart.addSeries("Coverage", libraries.asJava, usagePercents)
    chart.getStyler.setLegendVisible(false) // No legend
    chart.getStyler.setXAxisLabelRotation(60) // Rotate labels

    // Display the chart in a Swing window
    new SwingWrapper(chart).displayChart()
  }
}
